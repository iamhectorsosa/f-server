// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
)

const createMatch = `-- name: CreateMatch :exec
INSERT INTO matches (team_a, team_b) VALUES (?, ?)
`

type CreateMatchParams struct {
	TeamA int `json:"team_a"`
	TeamB int `json:"team_b"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) error {
	_, err := q.db.ExecContext(ctx, createMatch, arg.TeamA, arg.TeamB)
	return err
}

const createPlayer = `-- name: CreatePlayer :exec
INSERT INTO players (id, email) VALUES (?, ?)
`

type CreatePlayerParams struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) error {
	_, err := q.db.ExecContext(ctx, createPlayer, arg.ID, arg.Email)
	return err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (player_1, player_2, score) VALUES (?, ?, ?) RETURNING id, player_1, player_2, score
`

type CreateTeamParams struct {
	Player1 string `json:"player_1"`
	Player2 string `json:"player_2"`
	Score   int    `json:"score"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Player1, arg.Player2, arg.Score)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Player1,
		&i.Player2,
		&i.Score,
	)
	return i, err
}

const readPlayers = `-- name: ReadPlayers :many
SELECT
    p.id,
    p.email,
    CAST(COALESCE(SUM(t.score), 0) AS INTEGER) AS score
FROM players AS p
LEFT JOIN teams AS t
    ON p.id IN (t.player_1, t.player_2)
GROUP BY p.id
ORDER BY score DESC
`

type ReadPlayersRow struct {
	ID    string `json:"id"`
	Email string `json:"email"`
	Score int64  `json:"score"`
}

func (q *Queries) ReadPlayers(ctx context.Context) ([]ReadPlayersRow, error) {
	rows, err := q.db.QueryContext(ctx, readPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadPlayersRow
	for rows.Next() {
		var i ReadPlayersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
